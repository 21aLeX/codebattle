(try
  (load-file "check/solution.clj")
  (catch Exception ex
    (do
     (println (json/write-str {:status "error" :result (.getMessage ex)}))
     (System/exit 0)
     )))

(defn assert_result
  [expected result errorMessage]
  (try (assert (= expected result))
       (catch java.lang.AssertionError e
         (do
           (println (json/write-str {:status "failure" :result errorMessage}))
           (System/exit 0)
           ))))

(defn generate-tests
  [solution]
  <%= for %{arguments: arguments, expected: expected } <- checks do %>
    (assert_result <%= expected %> (apply solution [<%= arguments %>]), "[<%= arguments %>]")
  <% end %>
  (println (json/write-str {:status "ok" :result <%= hash_sum %>})))
