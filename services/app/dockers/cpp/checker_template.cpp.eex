#include <iostream>
#include <vector>
#include <map>
#include "solution.cpp"

using namespace std;

template <typename T>
void SendFailureMessage(string status, T result, string message) {
  cout << "{\"status\": \"" << status << "\", \"result\": \"" << result << "\", \"arguments\": \"" << message << "\"}\n";
}

template <typename T>
bool AssertSolution(T result, T expected, string message, bool success){
  bool status = result == expected;
  if (status == false) {
    SendFailureMessage("failure", message, message);
    return false;
  }
  return success;
}

template <typename T>
void SendMessage(string status, T result) {
  cout << "{\"status\": \"" << status << "\", \"result\": \"" << result << "\"}";
}

int main() {
  bool success = true;

  <%= for %{arguments: arguments, expected: expected, index: i, error_message: message } <- checks do %>
    <%= for %{defining: defining, value: value} <- arguments.info do %>
      <%= defining %> = <%= value %>;
    <% end %>
    <%= expected.defining %> = <%= expected.value %>;

    success = AssertSolution(solution(<%= arguments.expression %>), expected<%= i %>, "[<%= message %>]", success);
  <% end %>

  if (success) {
    SendMessage("ok", <%= hash_sum %>);
  }
}
