package main

import (
  "fmt";
  "os";
  "reflect";
  "encoding/json"
)

func main() {
  <%= for %{arguments: arguments, expected: expected, index: i} <- checks do %>
    <%= for %{defining: defining, value: value} <- arguments.info do %>
      var <%= defining %> = <%= value %>;
    <% end %>
    var <%= expected.defining %> = <%= expected.value %>;

    AssertSolution(solution(<%= arguments.expretion %>), expected<%= i %>, []interface{}{<%= arguments.expretion %>});
  <% end %>

  SendMessageAndExit("ok", <%= hash_sum %>);
}

func AssertSolution(result interface{}, expected interface{}, message []interface{}) {
  var status bool = reflect.DeepEqual(result, expected);
  if status == false {
    SendFailureMessageAndExit("failure", message);
  }
}

func SendMessageAndExit(status string, result string) {
  fmt.Printf("{\"status\": \"%s\", \"result\": \"%s\"}", status, result);
  os.Exit(0);
}

func SendFailureMessageAndExit(status string, result []interface{}) {
  message, err := json.Marshal(result)
  if err != nil {
    fmt.Println("Marshaler error")
    os.Exit(0)
  }

  fmt.Printf("{\"status\": \"%s\", \"result\": \"%s\"}", status, message);
  os.Exit(0)
}
