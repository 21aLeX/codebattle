- matches = @tournament.data.matches
- players = @tournament.data.players
- first_round_left_range = 0..7
- second_round_left_range = 8..11
- sm_final_range = 12..13
- final = 14

.text-center
  h1 = @tournament.name
  p  starts after #{@time.days} days #{@time.hours} hours #{@time.minutes} minutes #{@time.seconds} seconds

.container-fluid
  .row.justify-content-around
    .col-auto.d-flex.align-items-center.flex-column.bg-white.shadow-sm.py-4 style="max-width: 23%"
      h3 Participants
      = render "_players.html", players: players
      = if Codebattle.Tournament.Helpers.is_waiting_partisipants?(@tournament) do
        = if Codebattle.Tournament.Helpers.is_participant?(@tournament, @current_user.id) do
          button.btn.btn-outline-danger.mt-2[phx-click="leave"] Leave
        - else
          button.btn.btn-outline-success.mt-2[phx-click="join"] Join
        = if Codebattle.Tournament.Helpers.is_creator?(@tournament, @current_user.id) do
          button.btn.btn-outline-success.mt-2[phx-click="start"] Start
      = if Codebattle.Tournament.Helpers.is_creator?(@tournament, @current_user.id) do
        button.btn.btn-outline-danger.mt-2[phx-click="cancel"] Cancel
      = link "Back to tournaments", to: CodebattleWeb.Router.Helpers.tournament_path(@socket, :index), class: "btn btn-success mt-2"
    .col-9.bg-white.shadow-sm.py-4
      .d-flex.justify-content-around
        h4 1/8
        h4 1/4
        h4 1/2
        h4 Final
      .bracket
        .round
          = Enum.map first_round_left_range,  fn index ->
            .match
              .match__content.bg-light
                = render "_match.html", match:  Enum.at(matches, index)
        .round
          = Enum.map second_round_left_range,  fn index ->
            .match
              .match__content
                = render "_match.html", match:  Enum.at(matches, index)
        .round
          = Enum.map sm_final_range, fn index ->
            .match
              .match__content
                = render "_match.html", match:  Enum.at(matches, index)
        .round
          .match
            .match__content
              = render "_match.html", match:  Enum.at(matches, final)
